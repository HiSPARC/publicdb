from django.db import migrations, models

import publicdb.histograms.models


class Migration(migrations.Migration):

    dependencies = [
        ('inforecords', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('timestamp', models.DateTimeField()),
                ('gps_latitude', models.FloatField()),
                ('gps_longitude', models.FloatField()),
                ('gps_altitude', models.FloatField()),
                ('mas_version', models.CharField(max_length=40)),
                ('slv_version', models.CharField(max_length=40)),
                ('trig_low_signals', models.PositiveIntegerField()),
                ('trig_high_signals', models.PositiveIntegerField()),
                ('trig_external', models.PositiveIntegerField()),
                ('trig_and_or', models.BooleanField()),
                ('precoinctime', models.FloatField()),
                ('coinctime', models.FloatField()),
                ('postcoinctime', models.FloatField()),
                ('detnum', models.PositiveIntegerField()),
                ('spare_bytes', models.PositiveSmallIntegerField()),
                ('use_filter', models.BooleanField()),
                ('use_filter_threshold', models.BooleanField()),
                ('reduce_data', models.BooleanField()),
                ('startmode', models.BooleanField()),
                ('delay_screen', models.FloatField()),
                ('delay_check', models.FloatField()),
                ('delay_error', models.FloatField()),
                ('mas_ch1_thres_low', models.FloatField()),
                ('mas_ch1_thres_high', models.FloatField()),
                ('mas_ch2_thres_low', models.FloatField()),
                ('mas_ch2_thres_high', models.FloatField()),
                ('mas_ch1_inttime', models.FloatField()),
                ('mas_ch2_inttime', models.FloatField()),
                ('mas_ch1_voltage', models.FloatField()),
                ('mas_ch2_voltage', models.FloatField()),
                ('mas_ch1_current', models.FloatField()),
                ('mas_ch2_current', models.FloatField()),
                ('mas_comp_thres_low', models.FloatField()),
                ('mas_comp_thres_high', models.FloatField()),
                ('mas_max_voltage', models.FloatField()),
                ('mas_reset', models.BooleanField()),
                ('mas_ch1_gain_pos', models.PositiveSmallIntegerField()),
                ('mas_ch1_gain_neg', models.PositiveSmallIntegerField()),
                ('mas_ch2_gain_pos', models.PositiveSmallIntegerField()),
                ('mas_ch2_gain_neg', models.PositiveSmallIntegerField()),
                ('mas_ch1_offset_pos', models.PositiveSmallIntegerField()),
                ('mas_ch1_offset_neg', models.PositiveSmallIntegerField()),
                ('mas_ch2_offset_pos', models.PositiveSmallIntegerField()),
                ('mas_ch2_offset_neg', models.PositiveSmallIntegerField()),
                ('mas_common_offset', models.PositiveSmallIntegerField()),
                ('mas_internal_voltage', models.PositiveSmallIntegerField()),
                ('mas_ch1_adc_gain', models.FloatField()),
                ('mas_ch1_adc_offset', models.FloatField()),
                ('mas_ch2_adc_gain', models.FloatField()),
                ('mas_ch2_adc_offset', models.FloatField()),
                ('mas_ch1_comp_gain', models.FloatField()),
                ('mas_ch1_comp_offset', models.FloatField()),
                ('mas_ch2_comp_gain', models.FloatField()),
                ('mas_ch2_comp_offset', models.FloatField()),
                ('slv_ch1_thres_low', models.FloatField()),
                ('slv_ch1_thres_high', models.FloatField()),
                ('slv_ch2_thres_low', models.FloatField()),
                ('slv_ch2_thres_high', models.FloatField()),
                ('slv_ch1_inttime', models.FloatField()),
                ('slv_ch2_inttime', models.FloatField()),
                ('slv_ch1_voltage', models.FloatField()),
                ('slv_ch2_voltage', models.FloatField()),
                ('slv_ch1_current', models.FloatField()),
                ('slv_ch2_current', models.FloatField()),
                ('slv_comp_thres_low', models.FloatField()),
                ('slv_comp_thres_high', models.FloatField()),
                ('slv_max_voltage', models.FloatField()),
                ('slv_reset', models.BooleanField()),
                ('slv_ch1_gain_pos', models.PositiveSmallIntegerField()),
                ('slv_ch1_gain_neg', models.PositiveSmallIntegerField()),
                ('slv_ch2_gain_pos', models.PositiveSmallIntegerField()),
                ('slv_ch2_gain_neg', models.PositiveSmallIntegerField()),
                ('slv_ch1_offset_pos', models.PositiveSmallIntegerField()),
                ('slv_ch1_offset_neg', models.PositiveSmallIntegerField()),
                ('slv_ch2_offset_pos', models.PositiveSmallIntegerField()),
                ('slv_ch2_offset_neg', models.PositiveSmallIntegerField()),
                ('slv_common_offset', models.PositiveSmallIntegerField()),
                ('slv_internal_voltage', models.PositiveSmallIntegerField()),
                ('slv_ch1_adc_gain', models.FloatField()),
                ('slv_ch1_adc_offset', models.FloatField()),
                ('slv_ch2_adc_gain', models.FloatField()),
                ('slv_ch2_adc_offset', models.FloatField()),
                ('slv_ch1_comp_gain', models.FloatField()),
                ('slv_ch1_comp_offset', models.FloatField()),
                ('slv_ch2_comp_gain', models.FloatField()),
                ('slv_ch2_comp_offset', models.FloatField()),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DailyDataset',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('x', publicdb.coincidences.models.SerializedDataField()),
                ('y', publicdb.coincidences.models.SerializedDataField()),
            ],
            options={
                'ordering': ('source', 'type'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DailyHistogram',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('bins', publicdb.coincidences.models.SerializedDataField()),
                ('values', publicdb.coincidences.models.SerializedDataField()),
            ],
            options={
                'ordering': ('source', 'type'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DatasetType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=40)),
                ('slug', models.CharField(unique=True, max_length=20)),
                ('x_axis_title', models.CharField(max_length=40)),
                ('y_axis_title', models.CharField(max_length=40)),
                ('description', models.TextField(blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DetectorTimingOffset',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('offset_1', models.FloatField(null=True, blank=True)),
                ('offset_2', models.FloatField(null=True, blank=True)),
                ('offset_3', models.FloatField(null=True, blank=True)),
                ('offset_4', models.FloatField(null=True, blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='GeneratorState',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('check_last_run', models.DateTimeField()),
                ('check_is_running', models.BooleanField(default=False)),
                ('update_last_run', models.DateTimeField()),
                ('update_is_running', models.BooleanField(default=False)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='HistogramType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=40)),
                ('slug', models.CharField(unique=True, max_length=20)),
                ('has_multiple_datasets', models.BooleanField(default=False)),
                ('bin_axis_title', models.CharField(max_length=40)),
                ('value_axis_title', models.CharField(max_length=40)),
                ('description', models.TextField(blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='NetworkHistogram',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('bins', publicdb.coincidences.models.SerializedDataField()),
                ('values', publicdb.coincidences.models.SerializedDataField()),
            ],
            options={
                'ordering': ('source', 'type'),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='NetworkSummary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('date', models.DateField(unique=True)),
                ('num_coincidences', models.IntegerField(null=True, blank=True)),
                ('needs_update', models.BooleanField(default=False)),
                ('needs_update_coincidences', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('date',),
                'verbose_name_plural': 'network summaries',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PulseheightFit',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('plate', models.IntegerField(choices=[(1, b'Scintillator 1'), (2, b'Scintillator 2'), (3, b'Scintillator 3'), (4, b'Scintillator 4')])),
                ('initial_mpv', models.FloatField()),
                ('initial_width', models.FloatField()),
                ('fitted_mpv', models.FloatField()),
                ('fitted_mpv_error', models.FloatField()),
                ('fitted_width', models.FloatField()),
                ('fitted_width_error', models.FloatField()),
                ('degrees_of_freedom', models.IntegerField(default=0)),
                ('chi_square_reduced', models.FloatField()),
                ('error_type', models.CharField(default=b'', max_length=64)),
                ('error_message', models.TextField(default=b'')),
            ],
            options={
                'ordering': ('source', 'plate'),
                'verbose_name_plural': 'Pulseheight fit',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Summary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('date', models.DateField()),
                ('num_events', models.IntegerField(null=True, blank=True)),
                ('num_config', models.IntegerField(null=True, blank=True)),
                ('num_errors', models.IntegerField(null=True, blank=True)),
                ('num_weather', models.IntegerField(null=True, blank=True)),
                ('needs_update', models.BooleanField(default=False)),
                ('needs_update_events', models.BooleanField(default=False)),
                ('needs_update_config', models.BooleanField(default=False)),
                ('needs_update_errors', models.BooleanField(default=False)),
                ('needs_update_weather', models.BooleanField(default=False)),
                ('station', models.ForeignKey(to='inforecords.Station')),
            ],
            options={
                'ordering': ('date', 'station'),
                'verbose_name_plural': 'summaries',
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='summary',
            unique_together=set([('station', 'date')]),
        ),
        migrations.AddField(
            model_name='pulseheightfit',
            name='source',
            field=models.ForeignKey(to='histograms.Summary'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='pulseheightfit',
            unique_together=set([('source', 'plate')]),
        ),
        migrations.AddField(
            model_name='networkhistogram',
            name='source',
            field=models.ForeignKey(to='histograms.NetworkSummary'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='networkhistogram',
            name='type',
            field=models.ForeignKey(to='histograms.HistogramType'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='networkhistogram',
            unique_together=set([('source', 'type')]),
        ),
        migrations.AddField(
            model_name='detectortimingoffset',
            name='source',
            field=models.ForeignKey(to='histograms.Summary'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='dailyhistogram',
            name='source',
            field=models.ForeignKey(to='histograms.Summary'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='dailyhistogram',
            name='type',
            field=models.ForeignKey(to='histograms.HistogramType'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='dailyhistogram',
            unique_together=set([('source', 'type')]),
        ),
        migrations.AddField(
            model_name='dailydataset',
            name='source',
            field=models.ForeignKey(to='histograms.Summary'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='dailydataset',
            name='type',
            field=models.ForeignKey(to='histograms.DatasetType'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='dailydataset',
            unique_together=set([('source', 'type')]),
        ),
        migrations.AddField(
            model_name='configuration',
            name='source',
            field=models.ForeignKey(to='histograms.Summary'),
            preserve_default=True,
        ),
    ]
